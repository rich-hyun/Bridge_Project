// === Î∞òÎìúÏãú ÏàòÏ†ïÌï† Î∂ÄÎ∂Ñ ===
const TOKEN_A_ADDRESS = "0x4293609b058387ed14e25ee21eb299432bb0e06c"; // AÌÜ†ÌÅ∞ Ï£ºÏÜå
const TOKEN_B_ADDRESS = "0x0f1434a8b22cb97e7e2c637015f87cac3e7e0f48"; // BÌÜ†ÌÅ∞ Ï£ºÏÜå
const SWAP_ADDRESS    = "0x6310858b6e26f4f04a3d52effffa300446ed502c"; // Swap Ïª®Ìä∏ÎûôÌä∏ Ï£ºÏÜå
const RELAYER_ADDRESS = ""


// RemixÏóêÏÑú exportÌïú ABI Î∂ôÏó¨ÎÑ£Í∏∞ (Í∞ÑÎã®Ìûà ÌïÑÏöîÌïú Ìï®ÏàòÎßå)
const TOKEN_ABI = [
  "function approve(address spender, uint256 amount) external returns (bool)",
  "function allowance(address owner, address spender) external view returns (uint256)",
  "function balanceOf(address account) external view returns (uint256)",
  "function transfer(address to, uint256 amount) external returns (bool)"
];

const SWAP_ABI = [
  "function swapTMZtoTMZ2(uint256 amount) external",
  "function swapTMZ2toTMZ(uint256 amount) external"
];


// === Ï†ÑÏó≠ Î≥ÄÏàò ===
let provider, signer, tokenA, tokenB, swap;
const TMZ_RPC_URL = "https://jkk.mst2.site";
const JKK_CHAIN_ID = 7707;

// ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ ÌëúÏãúÌï† div Ï∂îÍ∞Ä (HTMLÏóê ÌëúÏãúÌï† ÏúÑÏπò)
async function connect() {
  if (window.ethereum) {
    provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send("eth_requestAccounts", []); // MetaMask Í≥ÑÏ†ï ÏöîÏ≤≠
    signer = provider.getSigner();
    document.getElementById("status").innerText = "Î©îÌÉÄÎßàÏä§ÌÅ¨ Ïó∞Í≤∞ ÏôÑÎ£å ‚úÖ";

    // ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ ÌëúÏãú
    displayNetworkInfo();
  } else {
    alert("MetaMaskÎ•º ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî!");
  }
}

// ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ ÌôïÏù∏
async function displayNetworkInfo() {
  try {
    const networkId = await provider.send("net_version", []); // net_version Î©îÏÑúÎìúÎ°ú ÎÑ§Ìä∏ÏõåÌÅ¨ ID Í∞ÄÏ†∏Ïò§Í∏∞
    console.log("ÌòÑÏû¨ ÎÑ§Ìä∏ÏõåÌÅ¨ ID (net_version):", networkId);  // ÎÑ§Ìä∏ÏõåÌÅ¨ ID Ï∂úÎ†•

    let networkName;

    // ÎÑ§Ìä∏ÏõåÌÅ¨ IDÎ•º Î¨∏ÏûêÏó¥Î°ú Ï≤òÎ¶¨ÌïòÏó¨ ÎπÑÍµê
    switch (networkId.toString()) {
      case "1":
        networkName = "Ethereum Mainnet";
        break;
      case "7707":
        networkName = "JKK-TMZ Network";  // 7707 ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑ§Ï†ï
        break;
      default:
        networkName = `Ïïå Ïàò ÏóÜÎäî ÎÑ§Ìä∏ÏõåÌÅ¨ (ID: ${networkId})`; // ÎÑ§Ìä∏ÏõåÌÅ¨ ID Ï∂úÎ†•
        break;
    }

    console.log("ÌòÑÏû¨ Ïó∞Í≤∞Îêú ÎÑ§Ìä∏ÏõåÌÅ¨:", networkName); // Ïó∞Í≤∞Îêú ÎÑ§Ìä∏ÏõåÌÅ¨ Ïù¥Î¶Ñ Ï∂úÎ†•
    document.getElementById("networkStatus").innerText = `ÌòÑÏû¨ ÎÑ§Ìä∏ÏõåÌÅ¨: ${networkName}`;
  } catch (error) {
    console.error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®", error);
    document.getElementById("networkStatus").innerText = "ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ Î∂àÎü¨Ïò§Í∏∞ Ïã§Ìå® ‚ùå";
  }
}




// A ÏäπÏù∏
async function approveA() {
  try {
    const amount = document.getElementById("amountInput").value;
    const tx = await tokenA.approve(SWAP_ADDRESS, ethers.utils.parseEther(amount));
    await tx.wait();
    document.getElementById("status").innerText = "TMZ ÏäπÏù∏ ÏôÑÎ£å ‚úÖ";
  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "TMZ ÏäπÏù∏ Ïã§Ìå® ‚ùå";
  }
}

// B ÏäπÏù∏
async function approveB() {
  try {
    const amount = document.getElementById("amountInput").value;
    const tx = await tokenB.approve(SWAP_ADDRESS, ethers.utils.parseEther(amount));
    await tx.wait();
    document.getElementById("status").innerText = "TMZ2 ÏäπÏù∏ ÏôÑÎ£å ‚úÖ";
  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "TMZ2 ÏäπÏù∏ Ïã§Ìå® ‚ùå";
  }
}

// A ‚Üí B ÍµêÌôò
async function swapAtoB() {
  try {
    const amount = document.getElementById("amountInput").value;
    const tx = await swap.swapTMZtoTMZ2(ethers.utils.parseEther(amount));
    await tx.wait();
    document.getElementById("status").innerText = "TMZ ‚Üí TMZ2 Ïä§Ïôë ÏÑ±Í≥µ üéâ";
    
    // ÍµêÌôò ÌõÑ Ïª®Ìä∏ÎûôÌä∏ ÏûîÍ≥†Î•º Îã§Ïãú Ï°∞Ìöå
    checkBalances();
  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "TMZ ‚Üí TMZ2 Ïä§Ïôë Ïã§Ìå® ‚ùå";
  }
}

// B ‚Üí A ÍµêÌôò
async function swapBtoA() {
  try {
    const amount = document.getElementById("amountInput").value;
    const tx = await swap.swapTMZ2toTMZ(ethers.utils.parseEther(amount));
    await tx.wait();
    document.getElementById("status").innerText = "TMZ2 ‚Üí TMZ Ïä§Ïôë ÏÑ±Í≥µ üéâ";
    
    // ÍµêÌôò ÌõÑ Ïª®Ìä∏ÎûôÌä∏ ÏûîÍ≥†Î•º Îã§Ïãú Ï°∞Ìöå
    checkBalances();
  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "TMZ2 ‚Üí TMZ Ïä§Ïôë Ïã§Ìå® ‚ùå";
  }
}

// balanceOf Ìò∏Ï∂úÏùÑ ÏïàÏ†ÑÌïòÍ≤å ÌïòÎäî Ìï®Ïàò
async function safeBalanceOf(token, address) {
  try {
    console.log(`balanceOf Ìò∏Ï∂ú Ï§ë... Ï£ºÏÜå: ${address}`);  // Ìò∏Ï∂ú ÏßÅÏ†Ñ
    const balance = await token.balanceOf(address);
    console.log(`balanceOf Ìò∏Ï∂ú ÌõÑ... ÏûîÏï°: ${ethers.utils.formatEther(balance)}`);  // Ìò∏Ï∂ú ÌõÑ
    return balance;
  } catch (err) {
    console.warn("balanceOf Ìò∏Ï∂ú Ïã§Ìå®", err);
    return ethers.BigNumber.from(0);
  }
}


// ÏûîÏï° Ï°∞Ìöå Î∞è ÌôîÎ©¥Ïóê ÌëúÏãú
async function checkBalances() {
  if (!tokenA || !tokenB || !swap) return;

  try {
    const swapAddress = await signer.getAddress();  // ÌòÑÏû¨ Ïó∞Í≤∞Îêú Í≥ÑÏ†ï Ï£ºÏÜå
    console.log("ÌòÑÏû¨ Í≥ÑÏ†ï Ï£ºÏÜå:", swapAddress);  // Í≥ÑÏ†ï Ï£ºÏÜå Ï∂úÎ†•

    const balanceA = await safeBalanceOf(tokenA, swapAddress);
    const balanceB = await safeBalanceOf(tokenB, swapAddress);
    
    // ÏûîÏï°ÏùÑ ÌôîÎ©¥Ïóê ÌëúÏãú
    document.getElementById("status").innerText =
      `Ïª®Ìä∏ÎûôÌä∏ ÏûîÍ≥† üëâ TMZ: ${ethers.utils.formatEther(balanceA)} , TMZ2: ${ethers.utils.formatEther(balanceB)}`;

    // HTMLÏóê ÌÜ†ÌÅ∞ ÏûîÏï° ÌëúÏãú
    document.getElementById("balanceTMZ").innerText = `TMZ ÏûîÏï°: ${ethers.utils.formatEther(balanceA)}`;
    document.getElementById("balanceTMZ2").innerText = `TMZ2 ÏûîÏï°: ${ethers.utils.formatEther(balanceB)}`;

    console.log("TMZ ÏûîÏï°:", ethers.utils.formatEther(balanceA));  // TMZ ÏûîÏï° Ï∂úÎ†•
    console.log("TMZ2 ÏûîÏï°:", ethers.utils.formatEther(balanceB));  // TMZ2 ÏûîÏï° Ï∂úÎ†•

  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "ÏûîÍ≥† Ï°∞Ìöå Ïã§Ìå® ‚ùå";
  }
}

async function checkAccount() {
  if (signer) {
    const account = await signer.getAddress();
    document.getElementById("account").innerText = `ÌòÑÏû¨ Í≥ÑÏ†ï: ${account}`;
  }
}

// Î≤ÑÌäº Ïù¥Î≤§Ìä∏ Ïó∞Í≤∞
document.getElementById("connectButton").onclick = connect;

// Safer connect wrapper: wait for MetaMask injection and handle file:// cases
async function waitForEthereum(timeoutMs = 3000) {
  if (window.ethereum) return window.ethereum;
  return await new Promise((resolve) => {
    function handler() { resolve(window.ethereum); }
    window.addEventListener('ethereum#initialized', handler, { once: true });
    setTimeout(() => resolve(window.ethereum), timeoutMs);
  });
}

async function connect2() {
  const eth = await waitForEthereum();
  if (!eth) {
    alert("MetaMaskÍ∞Ä Í∞êÏßÄÎêòÏßÄ ÏïäÏïòÏñ¥Ïöî. ÌååÏùºÎ°ú Ïó¨ÏÖ®Îã§Î©¥ ÌôïÏû• ÌîÑÎ°úÍ∑∏Îû® ÏÑ§Ï†ïÏóêÏÑú 'ÌååÏùº URLÏóê ÎåÄÌïú Ïï°ÏÑ∏Ïä§ ÌóàÏö©'ÏùÑ ÏºúÍ±∞ÎÇò, Î°úÏª¨ ÏÑúÎ≤Ñ(http://localhost)Î°ú Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî.");
    return;
  }

  provider = new ethers.providers.Web3Provider(eth);
  await provider.send("eth_requestAccounts", []);
  signer = provider.getSigner();
  document.getElementById("status").innerText = "Î©îÌÉÄÎßàÏä§ÌÅ¨ Ïó∞Í≤∞ ÏôÑÎ£å";

  try {
    await ensureNetwork();
  } catch (e) {
    document.getElementById("status").innerText = "ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ÑÌôò Ïã§Ìå®";
    console.error(e);
    return;
  }

  initContracts();
  await displayNetworkInfo();
  await checkAccount();

  if (eth && typeof eth.on === "function") {
    eth.on("accountsChanged", () => {
      checkAccount();
      checkBalances();
    });
    eth.on("chainChanged", () => {
      displayNetworkInfo();
      initContracts();
      checkBalances();
    });
  }
}

// Bind button to safer connect
document.getElementById("connectButton").onclick = connect2;
document.getElementById("approveAButton").onclick = approveA;
document.getElementById("approveBButton").onclick = approveB;
document.getElementById("swapAtoBButton").onclick = swapAtoB;
document.getElementById("swapBtoAButton").onclick = swapBtoA;
document.getElementById("balanceButton").onclick = checkBalances;

// === Enhance: network switch + contract init ===
const CHAIN_PARAMS = {
  chainId: "0x1E1B", // 7707
  chainName: "JKK-TMZ Network",
  rpcUrls: [TMZ_RPC_URL],
  nativeCurrency: { name: "TMZ", symbol: "TMZ", decimals: 18 },
  blockExplorerUrls: []
};

function initContracts() {
  tokenA = new ethers.Contract(TOKEN_A_ADDRESS, TOKEN_ABI, signer);
  tokenB = new ethers.Contract(TOKEN_B_ADDRESS, TOKEN_ABI, signer);
  swap   = new ethers.Contract(SWAP_ADDRESS,  SWAP_ABI,  signer);
}

async function ensureNetwork() {
  if (!window.ethereum) return;
  try {
    await window.ethereum.request({ method: "wallet_switchEthereumChain", params: [{ chainId: CHAIN_PARAMS.chainId }] });
  } catch (err) {
    if (err && (err.code === 4902 || err?.data?.originalError?.code === 4902)) {
      await window.ethereum.request({ method: "wallet_addEthereumChain", params: [CHAIN_PARAMS] });
      await window.ethereum.request({ method: "wallet_switchEthereumChain", params: [{ chainId: CHAIN_PARAMS.chainId }] });
    } else {
      console.warn("ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ÑÌôò Ïã§Ìå®:", err);
      throw err;
    }
  }
}

// Override: displayNetworkInfo to use chainId
async function displayNetworkInfo() {
  try {
    const network = await provider.getNetwork();
    const networkId = network.chainId;
    console.log("ÌòÑÏû¨ Ï≤¥Ïù∏ ID:", networkId);

    let networkName;
    switch (networkId.toString()) {
      case "1":
        networkName = "Ethereum Mainnet";
        break;
      case "7707":
        networkName = "JKK-TMZ Network";
        break;
      default:
        networkName = `Ïïå Ïàò ÏóÜÎäî ÎÑ§Ìä∏ÏõåÌÅ¨ (ID: ${networkId})`;
        break;
    }

    document.getElementById("networkStatus").innerText = `ÌòÑÏû¨ ÎÑ§Ìä∏ÏõåÌÅ¨: ${networkName}`;
  } catch (error) {
    console.error("ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®", error);
    document.getElementById("networkStatus").innerText = "ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏñ¥Ïöî";
  }
}

// Override: connect to ensure network and init contracts
async function connect() {
  if (window.ethereum) {
    provider = new ethers.providers.Web3Provider(window.ethereum);
    await provider.send("eth_requestAccounts", []);
    signer = provider.getSigner();
    document.getElementById("status").innerText = "Î©îÌÉÄÎßàÏä§ÌÅ¨ Ïó∞Í≤∞ ÏôÑÎ£å";

    try {
      await ensureNetwork();
    } catch (e) {
      document.getElementById("status").innerText = "ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ÑÌôò Ïã§Ìå®";
      console.error(e);
      return;
    }

    initContracts();
    await displayNetworkInfo();
    await checkAccount();

    if (window.ethereum && typeof window.ethereum.on === "function") {
      window.ethereum.on("accountsChanged", () => {
        checkAccount();
        checkBalances();
      });
      window.ethereum.on("chainChanged", () => {
        displayNetworkInfo();
        initContracts();
        checkBalances();
      });
    }
  } else {
    alert("MetaMaskÎ•º ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî!");
  }
}

// Re-bind events to latest functions
document.getElementById("connectButton").onclick = connect;
